class Item:
    def __init__(self, value, weight):
        self.value = value
        self.weight = weight
        self.ratio = value / weight  # Calculate value-to-weight ratio

def fractional_knapsack(capacity, items):
    # Sort items by value-to-weight ratio in descending order
    items.sort(key=lambda x: x.ratio, reverse=True)
    
    total_value = 0.0  # Total value of items we can carry
    for item in items:
        if capacity >= item.weight:
            # If the knapsack can carry the full item, take it
            capacity -= item.weight
            total_value += item.value
            print(f"Took entire item with value {item.value} and weight {item.weight}")
        else:
            # If the knapsack can't carry the full item, take the fraction we can
            fraction = capacity / item.weight
            total_value += item.value * fraction
            print(f"Took {fraction * 100:.2f}% of item with value {item.value} and weight {item.weight}")
            break  # Knapsack is now full
    
    return total_value

# Input format and instructions for the user
print("Enter the number of items:")
n = int(input())

items = []
print("Enter each item's value and weight separated by space (e.g., '60 10' for value=60, weight=10):")
for i in range(n):
    value, weight = map(int, input(f"Item {i+1}: ").split())
    items.append(Item(value, weight))

print("Enter the capacity of the knapsack:")
capacity = int(input())

# Calculating the maximum value
max_value = fractional_knapsack(capacity, items)
print(f"Maximum value in knapsack = {max_value:.2f}")
